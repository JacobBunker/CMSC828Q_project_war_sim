#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <bsd/stdlib.h>
#include <time.h>
#include <math.h>
#include <float.h>
#include <limits.h>
#include <unistd.h>
#include "neuralnet.h"
#include "arrays.h"


typedef struct brain{
  int Ncluster;
  int Size_cluster;
  neuralnet **Intra_nets;
  neuralnet **Extra_nets;  
  array3d_int *A;
  array3d_double *W;
}brain;

brain * brain_init (int Ncluster,int Size_cluster,int Nextra_links,int Nintra_links,int Ninput,int Noutput){
  assert(Ninput+Noutput+1<Size_cluster && Size_cluster*Size_cluster<Size_cluster*Size_cluster+1 &&Size_cluster*Size_cluster>Noutput);
  
  int intra_sizeA=Size_cluster*Size_cluster*sizeof(int),
    intra_sizeW=Size_cluster*Size_cluster*sizeof(long double),
    intra_sizea=Size_cluster*2*sizeof(long double),
    sizeA=Ncluster*Ncluster*sizeof(int), 
    sizeW=Ncluster*Ncluster*sizeof(long double); 
  
   int intrann_size=sizeof(neuralnet)+intra_sizea+intra_sizeW+intra_sizeA; // 

  brain * br=malloc(sizeof(brain)+intrann_size*Ncluster+sizeA+sizeW);
  
  br->Ncluster=Ncluster;
  br->Size_cluster=Size_cluster;
  br->Intra_nets=malloc(Ncluster*intrann_size);
  br->Intra_nets[0]=neuralnet_full_init(Ninput,Nintra_links,Size_cluster,Size_cluster*Size_cluster); //input nn
  br->Intra_nets[Ncluster-1]=neuralnet_full_init(Ninput,Nintra_links,Size_cluster,Size_cluster*Size_cluster); //output nn
  
  for(int i=1;i<Ncluster-1;++i){ 
    br->Intra_nets[i]=neuralnet_full_init(Nintra_links,Nintra_links,Size_cluster,Size_cluster*Size_cluster);
  }
  br->A=array3d_int_init(Ncluster,Ncluster,1);
  br->W=array3d_double_init(Ncluster,Ncluster,1);
  return br;
}

int main(){
  srand(time(NULL));
  neuralnet * p1=neuralnet_full_init(1,1,4,16);
  array3d_double_show(p1->W);
  printf("\n nlink %d \n",p1->Nlinks);
    array3d_int_show(p1->A);
  return 0;
  
}
